version: "3.8"

services:

  # ---- Zookeeper ----
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - microservices

  # ---- Kafka ----
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - microservices

  # ---- Kafdrop (visualisation Kafka) ----
  kafdrop:
    image: obsidiandynamics/kafdrop
    ports:
      - "9000:9000"
    environment:
      KAFKA_BROKER_CONNECT: kafka:9092
      JVM_OPTS: "-Xms32M -Xmx64M"
    depends_on:
      - kafka
    networks:
      - microservices

  # ---- User Service ----
  user-db:
    build:
      context: ./user-service
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
    volumes:
      - user_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  user-service:
    build: ./user-service
    environment:
      DATABASE_URL: "postgresql://admin:admin123@user-db/user_db"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      KAFKA_API_VERSION: "2.8.1"
    depends_on:
      user-db:
        condition: service_healthy
    ports:
      - "5000:5000"
    command: >
      bash -c "while ! nc -z user-db 5432; do sleep 2; done
      && while ! nc -z kafka 9092; do sleep 2; done
      && gunicorn --bind 0.0.0.0:5000 wsgi:app"
    networks:
      - microservices

  # ---- Salle Service ----
  salle-db:
    image: postgres:13
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: salle_db
    volumes:
      - salle_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d salle_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - microservices

  salle-service:
    build: ./salle-service
    environment:
      DATABASE_URL: "postgresql://admin:admin123@salle-db/salle_db"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
    depends_on:
      salle-db:
        condition: service_healthy
    ports:
      - "5001:5000"
    command: >
      bash -c "while ! nc -z salle-db 5432; do sleep 2; done
      && gunicorn --bind 0.0.0.0:5000 wsgi:app"
    networks:
      - microservices

  # ---- Reservation Service ----
  reservation-db:
    build:
      context: ./reservation-service
      dockerfile: Dockerfile.db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin123
      POSTGRES_DB: reservation_db
    volumes:
      - reservation_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d reservation_db"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - microservices

  reservation-service:
    build: ./reservation-service
    environment:
      DATABASE_URL: "postgresql://admin:admin123@reservation-db/reservation_db"
      KAFKA_BOOTSTRAP_SERVERS: "kafka:9092"
      USER_SERVICE_URL: "http://user-service:5000"
      SALLE_SERVICE_URL: "http://salle-service:5000"
    depends_on:
      reservation-db:
        condition: service_healthy
    ports:
      - "5002:5000"
    command: >
      bash -c "while ! nc -z reservation-db 5432; do sleep 2; done
      && while ! nc -z kafka 9092; do sleep 2; done
      && gunicorn --bind 0.0.0.0:5000 wsgi:app"
    networks:
      - microservices

  # ---- Flask Frontend ----
  frontend:
    build: ./flask-frontend
    ports:
      - "8000:8000"
    environment:
      FLASK_ENV: development
    depends_on:
      - user-service
      - salle-service
      - reservation-service
    networks:
      - microservices

volumes:
  user_data:
  salle_data:
  reservation_data:

networks:
  microservices:
    driver: bridge

